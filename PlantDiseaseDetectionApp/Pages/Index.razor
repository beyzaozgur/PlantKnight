@page "/"
@inject NavigationManager NavigationManager

<link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/4.7.0/css/font-awesome.min.css">

<img class="center" width="250" height="250" style="margin-top:20px;" src="Images/plant-knight.png" />
<img class="center" height="30" src="Images/plant-knight-title.png" />

<div class="text">
	Take/Upload a photo of your plant, learn about its disease, and get treatment suggestions from the chatbot!
</div>

<div class="button-container">
	<button class="btn btn-primary center" @onclick='(() => TakeUploadPhoto(1))'>
		<i class="fa fa-camera"></i> Take Photo
	</button>
	<button class="btn btn-primary center" @onclick='(() => TakeUploadPhoto(2))'>
		<i class="fa fa-upload"></i> Upload Photo
	</button>
	<button class="btn btn-warning center" @onclick='(() => Navigate("/chatbot"))'>
		<i class="fa fa-comments"></i> Chatbot
	</button>
</div>

@code {

	public void Navigate(string pageUrl)
	{
		NavigationManager.NavigateTo(pageUrl);
	}

	public string imageFilePath = "";

	public async void TakeUploadPhoto(int Id)
	{
		await Application.Current.MainPage.DisplayAlert("Warning", "Please make sure that the photo of the plant is close and clear to get the most accurate result.", "OK");

		if (MediaPicker.Default.IsCaptureSupported)
		{
			FileResult photo = null;

			// Id == 1 Take Photo, Id == 2 Upload Photo

			if (Id == 1)
			{
				photo = await MediaPicker.Default.CapturePhotoAsync();
			}
			else if (Id == 2)
			{
				photo = await MediaPicker.Default.PickPhotoAsync();
			}

			if (photo != null)
			{
				// save the file into local storage
				string localFilePath = Path.Combine(FileSystem.CacheDirectory, photo.FileName);

				using Stream sourceStream = await photo.OpenReadAsync();
				using FileStream localFileStream = File.OpenWrite(localFilePath);

				await sourceStream.CopyToAsync(localFileStream);


				// get image path
				sourceStream.Dispose();
				localFileStream.Dispose();
				var imageBytes = File.ReadAllBytes(localFilePath);
				imageFilePath = Convert.ToBase64String(imageBytes);
				imageFilePath = string.Format("data:image/png;base64,{0}", imageFilePath);
				StateHasChanged();

				// ML operations & return data
				Classifier.RunClassifier();

				var prediction_result = Classifier.getPrediction(Classifier.GetImageAsByteArray(localFilePath));

				var prediction_result_formatted = FormatLabelString(prediction_result);

				Console.WriteLine("PREDICTION RESULT FORMATTED : " + prediction_result_formatted);

				//send prediction result label to chatbot
				RunAndNavigate(prediction_result);

			}

		}

	}

	public void RunAndNavigate(string query)
	{
		bool isHealthy = PlantIsHealthy(prediction_result_formatted);

		string navText = "";

		if(!isHealthy) {
			navText = BotConnectorApp.RunBot(query);
		}
		else {
			navText = "This plant is healthy!"
		}

		Console.WriteLine("NAVIGATION TEXT: " + navText);

		NavigationManager.NavigateTo("/result/" + navText + "/" + query);
	}

	public string FormatLabelString(string label)
	{
		string formattedString = label.Replace("___", " ").Replace("_", " ");
		return formattedString;
	}

	public bool PlantIsHealthy(string label)
	{
		// Split the input string into words
		string[] words = label.Split(' ');

		// Check if any of the words match the target word
		foreach (string w in words)
		{
			if (string.Equals(w, "healthy", StringComparison.OrdinalIgnoreCase))
			{
				return true;
			}
		}

		return false;
	}
}
